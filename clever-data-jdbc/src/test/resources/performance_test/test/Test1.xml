<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="">

    <select id="queryReviewTask">
        select a.pick_group, a.review_no, a.review_staff_id
        from cmd_out a
        where a.wh_id = #{wh_id}
        and a.cmd_state in (60, 70, 80)
        and a.is_active = 1
        and a.is_unpack = 1
        <if test="threadCount>1">
            and MOD(a.PICK_GROUP, #{threadCount}) = #{seq}
        </if>
        and rownum &lt;= 1
        -- order by a.review_no
    </select>

    <select id="queryAllArea">
        SELECT t.area_id
        FROM bas_area t
        where t.wh_id = #{wh_id}
    </select>

    <select id="getReviewCode">
        SELECT T.*
        FROM bas_review t
        where t.wh_id = #{wh_id}
        order by t.reivew_code
    </select>

    <select id="getToken">
        select t.*, u.user_code
        from dev_token_example t
        inner join sys_user u on t.user_name = u.user_name
        where t.USER_NAME = #{userName}
        and t.wh_id = #{wh_id}
    </select>

    <select id="getContainer2">
        select t.CONTAINER_CODE
        from bas_container t
        where t.container_state = 0
        and t.wh_id = #{wh_id}
        and t.container_type = #{type}
        and rownum &lt;= #{num}
    </select>

    <select id="getContainer">
        select t.CONTAINER_CODE
        from bas_container t
        where t.container_state = 0
        and t.wh_id = #{wh_id}
        and t.container_type = #{type}
        and MOD(to_number(SUBSTR(t.container_code, 3)), #{threadCount}) = #{seq}
        and rownum &lt;= #{num}
    </select>

    <select id="selectBarCode">
        select container_code
        from bas_container t
        where t.container_state = 0
        and t.container_type = 1
        and t.wh_id = #{wh_id}
        and rownum &lt;= #{rownum}
    </select>

    <select id="selectOrderInExampleHz">
        select t.asn_in_id,
        t.asn_staff,
        t.dates,
        t.owner_id,
        t.wh_id,
        t.order_type,
        t.order_biz_type,
        t.supplier_id,
        '' cold_address,
        '' cold_company,
        '' cold_start_temp,
        '' cold_end_temp,
        '' cold_transport_tool,
        '' cold_wenk_way,
        '' cold_transport_person,
        business_code,
        0 multiple_receive,
        customer_code,
        b.customer_name,
        b.customer_name supplier_name,
        owner_name,
        '' order_dates,
        '压力测试' order_staff,
        '2' order_staff_id
        from ASN_IN t
        inner join bas_customer b on t.supplier_id = b.customer_id
        inner join bas_owner c on t.owner_id = c.owner_id
        where asn_in_id = #{asn_in_id}
    </select>

    <select id="selectOrderInExampleMx">
        select a.asn_in_id,
        aa.asn_in_code,
        a.asn_line_no,
        a.package_id,
        a.item_id,
        c.package_item_id,
        d.package_item_id primary_item_id,
        d.package_meas primary_meas,
        d.package_unit primary_unit,
        to_number(nvl(g.package_meas, 0) / nvl(c.package_meas, 1)) large, -- 托盘数量 4级包装
        floor(nvl(C.package_meas, 0) / nvl(d.package_meas, 1)) medium, -- 3级包装数量
        (a.qty - nvl(a.order_qty, 0)) surplus_qty, -- surplus_piece,
        floor((A.qty - nvl(A.order_qty, 0)) / nvl(C.package_meas, 1)) surplus_piece, -- 可收货件数
        mod(nvl(A.qty, 0), nvl(C.package_meas, 1)) surplus_less, -- 可收零货数量
        A.order_qty order_qty,
        c.package_level,
        c.package_meas,
        c.package_unit,
        #{quality} quality,
        #{quality_flg} quality_flg,
        0 barcode,
        0 price,
        a.lot_id,
        a.lot01,
        a.lot02,
        a.lot03,
        a.lot04,
        a.lot05,
        a.lot06,
        a.lot07,
        a.lot08,
        a.lot09,
        a.lot10,
        a.lot11,
        a.lot12
        from asn_in_details a
        inner join asn_in aa on a.ASN_IN_ID = aa.ASN_IN_ID
        inner join bas_item b on a.item_id = b.item_id
        inner join bas_package_items c on c.package_id = a.package_id and c.package_level = 3
        inner join bas_package_items d on d.package_id = a.package_id and d.package_level = 1
        left join bas_dict_items e on e.dict_value = c.package_level and e.dict_code = 'PACK_LEVEL'
        inner join asn_in f on f.asn_in_id = a.asn_in_id
        inner join bas_package_items g on g.package_id = a.package_id and g.package_level = 4
        where a.asn_in_id = #{asn_in_id}
    </select>

    <select id="selectAsnExample">
        select
        i.item_id, i.item_code, i.item_desc,
        pi1.package_meas primary_meas,
        i.item_name,i.manufacturer,i.stock_env,p.package_id,p.package_name,
        null lot_id, #{lot01} lot01, #{lot02} lot02, #{lot03} lot03, '' lot04,
        '' lot05, '' lot06, '' lot07, '' lot08, '' lot09, '' lot10, '' lot11, '' lot12, pi1.package_level,
        pi1.is_unpack,
        pi1.package_item_id,
        <if test="qtyFac != null">
            ceil(pi3.package_meas * #{qtyFac}) qty,
            ceil(pi3.package_meas * #{qtyFac}) qty_uom,
        </if>
        <if test="qty != null">
            #{qty} qty,
            #{qty} qty_uom,
        </if>
        #{quality} quality
        from bas_item i
        inner join rule_apply ra on i.item_id = ra.match_id and ra.rule_type=1 and ra.match_type=4
        inner join bas_package p on i.item_id = p.item_id
        left join bas_package_items pi1 on p.package_id = pi1.package_id and pi1.package_level = 1
        left join bas_package_items pi2 on p.package_id = pi2.package_id and pi2.package_level = 2
        left join bas_package_items pi3 on p.package_id = pi3.package_id and pi3.package_level = 3
        where
        pi1.length >0 and pi1.width > 0 and pi1.HIGH > 0 and pi1.weight > 0
        and (
        select count(distinct rai.package_level) from rule_putaway_items rai
        where rai.package_level IN (1,3) AND rai.rule_putaway_id=ra.rule_id
        ) >= 2
        and rownum &lt;= #{rownum}
    </select>
</mapper>
