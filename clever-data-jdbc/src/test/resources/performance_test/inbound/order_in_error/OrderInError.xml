<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="OrderInError">

    <select id="queryList">
        select oi.order_in_id,
               oi.order_in_code,
               oi.supplier_id,
               bc.customer_code,
               bc.customer_name as supplier_name,
               oi.dates,
               oi.asn_staff,
               oi.business_code,
               oi.order_type,
               oi.order_biz_type,
               oi.is_complete,
               (select user_name from sys_user where user_id = oi.ORDER_STAFF_ID) as order_staff,
               (select decode(count(1), count(ci.quality_employee_id), 1, 0) from cmd_in ci where ci.order_id = oi.order_in_id ) as is_check,
               bo.owner_code,
               bo.owner_name
        from order_in oi
             inner join bas_customer bc on oi.supplier_id = bc.customer_id
             inner join bas_owner bo on bo.owner_id = oi.owner_id
             inner join asn_in ai on ai.asn_in_id = oi.asn_in_id
        where oi.check_print_bill = 0 and oi.WH_ID = #{wh_id}
        <if test="#obj.notEmpty(ownerArr)">
            and oi.owner_id in
            <foreach collection="ownerArr" separator="," item="item" index="index" open="(" close=")">
                #{item}
            </foreach>
        </if>
        and exists(
            select 1
            from cmd_in
            where order_id = oi.order_in_id
            <![CDATA[ and cmd_state < 1000 ]]>
        )
        <if test="#obj.notEmpty(barcode)">
        and exists(
            select 1
            from cmd_in
            where order_id = oi.order_in_id and barcode = #{barcode}
        )
        </if>
        --@ and oi.order_biz_type = #{asn_type}
        --@ and ai.business_code like '%' ||  #{business_code} || '%'
        order by oi.order_in_id desc
    </select>

    <select id="queryOrderDetails">

        select d.item_id,
               d.item_code,
               d.item_name,
               d.logogram,
               d.manufacturer,
               d.origin,
               d.is_double_quality,
               d.item_mhdhb,
               f.package_unit,
               floor(nvl(g.package_meas, 0) / nvl(f.package_meas, 1))                 AS medium,
               c.lot_id,
               c.qty_plan,
               c.qty,
               c.quality_flg,
               decode(c.is_unpack, 1, 0, floor(nvl(c.qty, 0) / nvl(g.package_meas, 1))) AS order_qty_piece,
               decode(c.is_unpack, 1, c.qty, 0) AS order_qty_less,

               -- floor(nvl(c.qty, 0) / nvl(g.package_meas, 1))                          AS order_qty_piece,
               -- mod((c.qty), nvl(g.package_meas, 1))                                   AS order_qty_less,
               c.order_id                                                             as order_in_id,
               c.order_line_no,
               c.package_id,
               c.lpn,
               c.price,
               c.asn_in_id,
               c.asn_line_no,
               c.business_code,
               c.cmd_line_no,
               c.loc_id,
               i.loc_code,
               i1.loc_code                                                            as loc_code_real,
               h.area_id,
               h.area_code,
               h.area_name,
               j.lot01,
               j.lot02,
               j.lot03,
               j.lot04,
                j.lot05,
                j.lot06,
                j.lot07,
                j.lot08,
                j.lot09,
                j.lot10,
                j.lot11,
                j.lot12,
               c.quality_employee_id,
               (select user_name from sys_user where user_id = c.quality_employee_id) as quality_employee,
               c.splity_employee_id,
               (select user_name from sys_user where user_id = c.splity_employee_id) as splity_employee,
               c.update_employee,
               c.order_type,
               c.order_biz_type,
               c.barcode
        from cmd_in c
             inner join bas_item d on d.item_id = c.item_id
             inner join bas_lot_att e on e.lot_id = c.lot_id
             inner join bas_package_items f
                        on f.PACKAGE_ID = c.PACKAGE_ID and f.item_id = c.item_id and f.PACKAGE_LEVEL =
                                                                                     '1'
             inner join bas_package_items g
                        on g.PACKAGE_ID = c.PACKAGE_ID and g.item_id = c.item_id and g.PACKAGE_LEVEL =
                                                                                     '3'
             inner join bas_area h on h.area_id = c.area_id
             inner join bas_location i on i.loc_id = c.loc_id
             inner join bas_location i1 on i1.loc_id = c.loc_id_real
             inner join bas_lot_att j on c.lot_id = j.lot_id
        where c.order_id = #{order_in_id} and c.WH_ID = #{wh_id} <![CDATA[ and c.cmd_state < 1000 ]]>
        <if test="#obj.notEmpty(ownerArr)">
            and c.owner_id in
            <foreach collection="ownerArr" separator="," item="item" index="index" open="(" close=")">
                #{item}
            </foreach>
        </if>
        --@ and c.barcode = #{barcode}
        order by c.order_id desc, c.order_line_no asc
    </select>

    <select id="selectCmdPut">
        select
        ci.*,
        ai.multiple_receive
        from cmd_in ci
        left join asn_in ai on ai.asn_in_id = ci.asn_in_id
        where ci.order_id = #{order_in_id} and ci.cmd_line_no = #{cmd_line_no}
    </select>


</mapper>
