### 模块说明
clever-spring           参考spring最核心的代码实现：通用类、工具类、注解扩展、类型反射、IO流、应用环境、基础类型转换、Bean类型转换
clever-core             封装常用的工具类: 序列化反序列化、HTTP、编码解码、ID生成、Bean转换验证、Excel、异常、验证码等等
clever-web              基于javalin封装servlet web服务器的实现,参考spring mvc部分注解的实现,支持web mvc动态调用java class(包含kotlin或groovy等JVM语言,需要编译器支持)
clever-groovy           基于groovy实现web mvc动态调用groovy class(无需编译器支持)

clever-js-api           JS引擎API层
clever-js-graaljs       graaljs引擎实现
clever-js-nashorn       nashorn引擎实现
clever-js-j2v8          v8引擎实现
clever-js-test          JS引擎测试代码

clever-swagger2

clever-data-dynamic-sql 实现类似mybatis的sql模版,实现动态sql能力
clever-data-jdbc        参考spring-jdbc实现对JDBC操作的轻度封装
clever-data-jdbc-meta   基于schemacrawler实现读取数据库表结构信息的功能

clever-data-redis       基于spring-data-redis实现对Redis操作的轻度封装
clever-data-rabbitmq    实现对rabbitmq操作的轻度封装
clever-data-rocketmq    实现对rocketmq操作的轻度封装
clever-data-kafka       实现对kafka操作的轻度封装

clever-security         实现一套RBAC模型的权限认证功能

clever-boot             应用启动项目,各个组件模块整合示例

### 依赖关系

clever-boot -> ...
🡓
clever-groovy -> groovy
🡓
clever-web → javalin
🡓
clever-core → cglib jackson commons-lang3 commons-io commons-codec json guava okhttp3
🡓
clever-spring → snakeyaml slf4j-api jul-to-slf4j logback-classic

---

clever-data-jdbc-meta → schemacrawler
🡓
clever-data-jdbc → clever-data-dynamic-sql querydsl HikariCP
🡓
clever-core

---

clever-data-redis → commons-pool2 lettuce jedis

### 其它
javalin文档
5.0新特性            https://javalin.io/news/javalin-5.0.0-stable.html
4.x升级5.x升级手册    https://javalin.io/migration-guide-javalin-4-to-5
4.x文档：            https://javalin.io/archive/docs/v4.6.X.html
4.x ----------------------
生命周期
Javalin app = Javalin.create().events(event -> {
    event.serverStarting(() -> { ... });
    event.serverStarted(() -> { ... });
    event.serverStartFailed(() -> { ... });
    event.serverStopping(() -> { ... });
    event.serverStopped(() -> { ... });
    event.handlerAdded(handlerMetaInfo -> { ... });
    event.wsHandlerAdded(wsHandlerMetaInfo -> { ... });
});
app.start() // serverStarting -> (serverStarted || serverStartFailed)
app.stop() // serverStopping -> serverStopped
###---
请求生命周期
Javalin#before              // runs first, can throw exception (which will skip any endpoint handlers)
Javalin#get/post/patch/etc  // runs second, can throw exception
Javalin#error               // runs third, can throw exception
Javalin#after               // runs fourth, can throw exception
Javalin#exception           // runs any time a handler throws (cannot throw exception)
JavalinConfig#requestLogger // runs after response is written to client
JavalinConfig#accessManager // wraps all your endpoint handlers in a lambda of your choice
###---
静态文件
run before-handlers
run endpoint-handlers
if no endpoint-handler found
    run static-file-handlers
    if static-file-found
        static-file-handler sends response
    else
        response is 404
run after-handlers
###---
静态文件配置
Javalin.create(config -> {
  config.addStaticFiles(staticFiles -> {
    staticFiles.hostedPath = "/";                   // change to host files on a subpath, like '/assets'
    staticFiles.directory = "/public";              // the directory where your files are located
    staticFiles.location = Location.CLASSPATH;      // Location.CLASSPATH (jar) or Location.EXTERNAL (file system)
    staticFiles.precompress = false;                // if the files should be pre-compressed and cached in memory (optimization)
    staticFiles.aliasCheck = null;                  // you can configure this to enable symlinks (= ContextHandler.ApproveAliases())
    staticFiles.headers = Map.of(...);              // headers that will be set for the files
    staticFiles.skipFileFunction = req -> false;    // you can use this to skip certain files in the dir, based on the HttpServletRequest
  });
});
###---
--------------------------

5.x ----------------------
生命周期
Javalin app = Javalin.create().events(event -> {
    event.serverStarting(() -> { ... });
    event.serverStarted(() -> { ... });
    event.serverStartFailed(() -> { ... });
    event.serverStopping(() -> { ... });
    event.serverStopped(() -> { ... });
    event.handlerAdded(handlerMetaInfo -> { ... });
    event.wsHandlerAdded(wsHandlerMetaInfo -> { ... });
});
app.start() // serverStarting -> (serverStarted || serverStartFailed)
app.stop()  // serverStopping -> serverStopped
###---
请求生命周期
Javalin#before              // runs first, can throw exception (which will skip any endpoint handlers)
Config#accessManager        // can be configured to run before endpoints (get/post/patch/etc)
Javalin#get/post/patch/etc  // runs second, can throw exception
Javalin#after               // runs third, can throw exception
Javalin#error               // runs fourth, can throw exception
Javalin#exception           // runs any time a handler throws (cannot throw exception)
Config#requestLogger        // runs after response is written to client
###---
静态文件
run before-handlers
run endpoint-handlers
if no endpoint-handler found
    run static-file-handlers
    if static-file-found
        static-file-handler sends response
    else
        response is 404
run after-handlers
###---
静态文件配置
Javalin.create(config -> {
  config.staticFiles.add(staticFiles -> {
    staticFiles.hostedPath = "/";                   // change to host files on a subpath, like '/assets'
    staticFiles.directory = "/public";              // the directory where your files are located
    staticFiles.location = Location.CLASSPATH;      // Location.CLASSPATH (jar) or Location.EXTERNAL (file system)
    staticFiles.precompress = false;                // if the files should be pre-compressed and cached in memory (optimization)
    staticFiles.aliasCheck = null;                  // you can configure this to enable symlinks (= ContextHandler.ApproveAliases())
    staticFiles.headers = Map.of(...);              // headers that will be set for the files
    staticFiles.skipFileFunction = req -> false;    // you can use this to skip certain files in the dir, based on the HttpServletRequest
  });
});
--------------------------
